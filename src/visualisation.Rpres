Visualisation with R
========================================================
author: Vik Gopal and Wu Dan
date: July 22, 2014

#### Marina Bay Sands
#### BDAH 2014

Outline
===
type: section

- **Introduction to Framingham Heart Study**
- R and RStudio
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
- The Grammar of Graphics with `ggplot2`
- Interactive Plots with `shiny`

The Framingham Heart Study (FHS)
===
navigation: section
- Long term study of Cardiovascular Disease (CVD) among subjects in Framingham.
- Started in 1948 with 5209 subjects.
- Patients examined every 2 years for
  + Clinical examination data
  + Cardiovascular outcomes
- More information about the study can be found at the FHS
  [official website](http://www.framinghamheartstudy.org/)

Some Findings of the FHS
===
- Over 1000 medical papers have been published using the data from the FHS.
- The study has uncovered or confirmed several risk factors for CVD:
  + High blood pressure
  + Obesity
  + Cigarette smoking
- The study has also shown there are differences in cardiovascular risk between
  men and women.

Our Dataset
===
- We have a subset of the original dataset, pertaining to 4434 patients.
- Each of these patients was followed for a total of 24 years, but we only have
  data on their clinical examinations for a period of 6 years, spanning 1956 to 1968. 
  + The data is provided in Longitudinal form.
  + Each participant has 1 to 3 observations.
  + There are a total of 11627 rows in the data.

Columns in Our Dataset
===
Here are the *first six columns and rows* of our dataset:
```{r echo=FALSE}
library(dplyr)
library(ggplot2)
fhs.long <- read.csv("../data/frmgham2.csv")
head(fhs.long[,1:6])
```
- `RANDID` refers to the patient id.
- The remaining columns are measurements on the patients during their
  examinations, and outcome measures. 

Measurements in Our Dataset
===
incremental: true
1. ***SEX*** = 1 for males and 2 for females.   
2. ***PERIOD*** = an integer between 1 and 3 denoting the examination number.  
3. ***AGE*** = age at examination (in years).  
4. ***SYSBP, DIABP*** = systolic and diastolic blood pressure.   
5. ***CIGPDAY*** = number of cigarettes smoked per day.   
6. ***BMI*** = Body Mass Index.
7. ***LDLC*** = Low density cholesterol.
8. ***TOTCHOL*** = total cholesterol.

Outcome Measures in Our Dataset
===
incremental: true
1. ***STROKE*** = 1 if patient experienced a stroke during the 12 years and 0
otherwise.   
2. ***ANYCHD*** = 1 if patient experienced a Coronary Heart Disease during the
12 years and 0 otherwise.   
3. ***CVD*** = 1 if patient experienced a Cerebrovascular Disease during the
12 years and 0 otherwise.   
4. ***HYPERTENSION*** = 1 if patient has hypertension, which is defined to be
Systolic greater than 140mmHg or Diastolic greater than 90mmHg.

Outline
===
type: section

- Introduction to Framingham Heart Study
- **R and RStudio**
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
- The Grammar of Graphics with `ggplot2`
- Interactive Plots with `shiny`

Outline
===
type: subsection

- Introduction to Framingham Heart Study
- R and RStudio
  + **Installation**
  + R Basics
- Data Manipulation with `dplyr`
- The Grammar of Graphics with `ggplot2`
- Interactive Plots with `shiny`

Installing R
===
- Go to [CRAN](http://cran.r-project.org "Comprehensive R Archive Network").
- Click on the link corresponding to your OS.
- **Please install R version 3.1.0 for this workshop.**

*If you are using OS X, it is highly recommended that you install the version
for Snow Leopard rather than Mavericks.*

About RStudio
===
incremental: true
- RStudio is an Integrated Development Environment (IDE) developed specifically
  for R coding.
- It is free, and provides a familiar interface to programmers with features
  such as 
  + Execution of source code directly from the source editor.
  + Syntax highlighting and code completion.
  + History of plots, commands and help files.
- It is certainly good for a newcomer to R, but it is also the environment of
  choice for many advanced users.

Installing RStudio
===
- Go to [RStudio](http://www.rstudio.com/ide/download/ "RStudio Downloads")
- Download the **RStudio Desktop** and install the appropriate version for your
  OS.
- **Please install at least version 0.98.932 for this workshop.**

***

![Not found](rstudio_install.png)

Navigating RStudio
===
![Not found](rstudio_panels_1.png "RStudio Panels")
![RStudio Panels](rstudio_panelsa.png "RStudio Panels")

<small>
1. Console  
2. Source code editor  
3. History panel  
4. Plot/Help/Package Installation panel  
</small>

Required R Packages
===
incremental: true
Make sure you have the following packages installed for this workshop:

1. dplyr    
2. ggplot2   
3. shiny    

Use the *Packages* tab in panel number 4, and make sure that all dependencies
are installed as well.

Ready To Go? (dplyr and ggplot2)
===
Checking on `dplyr`:
```{r eval=TRUE}
library(dplyr)
```
Checking on ggplot2:
```{r}
library(ggplot2)
```

Ready To Go? (shiny test)
===
1. Open RStudio, go to *File > New File > R Markdown*   
2. Select **Shiny** on the left.
3. Fill in the **Title** and **Author** fields and click OK.
![Not found](Shiny_create.png)

Ready To Go? (shiny success)
===
1. Save the newly created file in the console.  
2. Click on **Run Document**.  

***

![Not found](Shiny_success.png)

Outline
===
type: subsection

- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + **R Basics**
- Data Manipulation with `dplyr`
- The Grammar of Graphics with `ggplot2`
- Interactive Plots with `shiny`

R Data Objects
===
- R is a language for statistical computing.
- Statistics is about understanding data.
- Hence we need to know a little about how R represents data.
- The main data structures that R uses are 
  + vectors,
  + matrices and
  + data frames.

Vectors
===
- R has no scalars, only **vectors**.
- Think of a vector as an ordered string of *things that are alike*. These
  *things* could be 
  + integers,
  + real numbers,
  + words, and so on and so forth.
- Here's how we create and print vectors in R.
```{r}
Z <- c(7.3,2,13.1)
Z
```
- The `c()` function stands for `catenate`.

Accessing Elements in a Vector
===
- The `:` operator creates a sequence of integers, which can then be used to
  access individual elements in a vector.
```{r}
Z[1:2]
```
- When a negative sign is added in front, it means that the values at these
  indices should be dropped.
```{r}
Z[-(1:2)]
```

Exercise 1
===
Try out the following tasks, that pertain to vectors.

1. Run the following code, and try to figure out what it does:
```{r eval=FALSE}
Z[c(1,3)]
```
How is it different from `Z[-2]`?  
2. The expression `1:5` creates the vector `c(1,2,3,4,5)`. What does `5:1` do?  
3. How can we create a vector `c(1.2, 2.2, 3.2, 4.2)`?  

Matrices
===
- Matrices are 2-dimensional arrays with all elements of the same type. 
```{r}
mymat <- matrix(1:9, nrow=3, ncol=3)
mymat
```
- Matrix elements are accessed with the same syntax as vectors, except that
  there is a comma to separate the column and row references.

Accessing Elements Within a Matrix
===
- Accessing the element in row 3 and column 2:
```{r}
mymat[3,2]
```
- Accessing row 3:
```{r}
mymat[3, ]
```

Accessing Elements Within a Matrix
===
- Accessing columns 2 and 3 of rows 1 and 3:
```{r size="tiny"}
mymat[c(1,3), c(2,3)]
```

Data Frames
===
incremental: true
- A data frame is the common construct used to store data in R.
- It is very similar to a matrix, and the syntax to access the elements is
  identical to that of a matrix.
- The difference is this:
  + Within columns, the elements are all alike.
  + However, the columns are not all of the same type.
- Let's look at an example.

Creating Data Frames
=== 
The following code creates a data frame:
```{r}
tea.type <- c("black", "red", "green")
cost <- c(4, 5, 5.5)
tea.df <- data.frame(cost, tea.type)
tea.df
```
- As is clear, one column consists of numerals, whereas the other consists of
  characters or words.

Exercise 2
===
1. Retrieve the element in row 3 and column 2 of the `tea.df` data frame.  
2. What does the following expression return?
```{r eval=FALSE}
tea.df$cost
```

Outline
===
type: section

- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + R Basics
- **Data Manipulation with `dplyr`**
  + Data Manipulation Verbs
  + Manipulating the FHS Data
- The Grammar of Graphics with `ggplot2`
- Interactive Plots with `shiny`

Our Dataset
===
- Within RStudio, go to *Session > Set Working Directory* and set the working
directory to be one level up from the `data/` and `src/` folders. Now run the
following on the console.   
```{r}
fhs.long <- 
  read.csv("../data/frmgham2.csv", 
 header=TRUE)
## We need this from now on.
library(dplyr) 
```   
- Within panel 3 of RStudio, click on the *Environment* tab.  
- Click on the spreadsheet icon next to the `fhs.long` object.  

Our Immediate Target
===
- We need to extract the subset of data that we need for Goal 1.
- Recall that our dataset contains 1 to 3 visits for each subject.
- We need to extract only the information for the first visit, and also to
  create the age categories.
- Our final dataset should look something like this:
```{r eval=FALSE}
SEX HYPERTEN STROKE CVD AGE.CAT PERIOD
  1   0         1    1  (30,44]   1
  2   1         0    0  (44,54]   1
  2   0         0    0  (30,44]   1
```
where each row corresponds to a different `RANDID`.

Outline
===
type: subsection

- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
  + **Data Manipulation Verbs**
  + Manipulating the FHS Data
- The Grammar of Graphics with `ggplot2`
- Interactive Plots with `shiny`

Filtering Data
===
- `filter()` is for selecting a subset of rows.
- The criteria will be based on the columns already in the data.
- Suppose we wanted all patients who had hypertension.
```{r}
out <- filter(fhs.long, HYPERTEN == 1)
head(out[, c("RANDID", "PERIOD", "HYPERTEN")])
```

Filtering Data
===
- Suppose we wanted all patients who had hypertension but not CVD, and whose BMI
  was greater than 25.
```{r}
out <- filter(fhs.long, HYPERTEN == 1, CVD == 0, BMI > 25)
head(out[, c("RANDID", "PERIOD", "HYPERTEN", "CVD", "BMI")])
```

Filtering Data
===
- Suppose we wanted all patients who had hypertension or CVD.
```{r}
out <- filter(fhs.long, HYPERTEN == 1 | CVD == 1)
head(out[, c("RANDID", "PERIOD", "HYPERTEN", "CVD")])
```

Selecting Columns
===
- If we wish to select only a few columns to work with, we can use the
  `select()` verb.
- Suppose we wished to select only the columns AGE, SYSBP and DIABP.
```{r}
out <- select(fhs.long, AGE, SYSBP, DIABP)
head(out)
```

Selecting Columns
===
- Many times, we wish to select a set of columns that are contiguous.
- We can then use the `:` operator.
- This can save us a lot of typing.
```{r}
out <- select(fhs.long, AGE:DIABP)
head(out)
```

Mutating Columns
===
- Often, we need to transform a particular column(s) to result in a new column.
- We can achieve this with the `mutate()` operator.
- Suppose we wish to take the log of TOTCHOL.
```{r}
out <- mutate(fhs.long,
  LOG.TOTCHOL = log(TOTCHOL))
head(out[, c("RANDID", "TOTCHOL", "LOG.TOTCHOL")])
```

Summarising Columns
===
- Finally, we can `summarise()` a column using functions that take in a vector
  and return a **single** value.
- We shall see the value of this verb in a short while.
```{r}
summarise(fhs.long, mean.BMI = mean(BMI, na.rm=TRUE)) 
```

Exercise 3
===
1. Create a data frame that only contains subjects that died.
2. Create a data frame that contains only period 1 examinations for patients who
were above 50 years of age at the time.
3. Add a new column that contains the difference between DIABP and SYSBP.


Splitting Into Groups
===
- The `group_by()` operator can be used to split the data frame into groups.
```{r}
fhs.tmp <- filter(fhs.long, PERIOD == 3)
fhs.tmp <- select(fhs.tmp, AGE, BMI, SEX, 
  HYPERTEN)
fhs.tmp <- group_by(fhs.tmp, SEX, HYPERTEN)
summarise(fhs.tmp, 
  mean.BMI = mean(BMI, na.rm=TRUE)) 
```

Daisy-chaining Operations
===
- Notice how we kept re-assigning the output to `fhs.tmp` earlier?
```{r}
filter(fhs.long, PERIOD == 3) %>%
select(AGE, BMI, SEX, HYPERTEN) %>% 
group_by(SEX, HYPERTEN) %>% 
summarise(mean.BMI = mean(BMI, 
    na.rm=TRUE)) 
```

Getting More Help
===
For more details and examples on the `dplyr` package, take a look at the
documentation that is included with the package.

```{r eval=FALSE}
vignette('introduction')
```


Outline
===
type: subsection

- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
  + Data Manipulation Verbs
  + **Manipulating the FHS Data**
- The Grammar of Graphics with `ggplot2`
- Interactive Plots with `shiny`

Extracting The Data for Goal 1
===
The `cut()` function in R divides a numeric variable into categories.
```{r}
fhs.only1 <- 
  filter(fhs.long, PERIOD==1) %>% 
  mutate(AGE.CAT=cut(AGE, 
  breaks=c(30,44,54,64,74,84)))
head(fhs.only1[,c("RANDID","PERIOD", "AGE.CAT")])
```

Outline
===
type: section

- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
  + Data Manipulation Verbs
  + Manipulating the FHS Data
- **The Grammar of Graphics with `ggplot2`**
  + Elements of a Graphic
- Interactive Plots with `shiny`

Outline
===
type: subsection
- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
  + Data Manipulation Verbs
  + Manipulating the FHS Data
- The Grammar of Graphics with `ggplot2`
  + **Elements of a Graphic**
- Interactive Plots with `shiny`

The Grammar of Graphics
===
- The grammar of graphics is an abstract way of thinking about plots and
  graphics.
- It introduces a language for specifying what plot to make.
- It is based on certain building blocks that define different aspects of a
  plot.

Motivating Example 1
===
```{r}
x <- c(1,2)
y <- c(2,4)
```
```{r echo=FALSE}
plot(x,y, 
  xlim=c(0,4), 
  ylim=c(1,5), 
  cex=2, col="red")
```
***

- What was the **data** plotted?
- Which variable was **mapped** to the x-axis and which to the y-axis?
- What **objects** were plotted? Points? Lines?
- Were they **transformed** before plotting in any way?

Motivating Example 2
===
```{r}
x <- c(1,2)
y <- c(2,4)
z <- c("A","B")
```
```{r echo=FALSE}
plot(x,y, 
  xlim=c(0,4), 
  ylim=c(1,5), pch=19,
  cex=2, col=c("red","green"))
```
***

- What was the **data** plotted?
- Which variable was **mapped** to the x-axis, which to the y-axis and which to
  colour?
- What **objects** were plotted? Points? Lines?
- Were they **transformed** before plotting in any way?

Motivating Example 3
===
```{r}
set.seed(1)
x <- rnorm(1000)
```
```{r echo=FALSE}
hist(x, col="steelblue", border="red", bins=20)
```
***

- What was the **data** plotted?
- Which variable was **mapped** to the x-axis?
- What **objects** were plotted? Points? Lines? A histogram?
- Were they **transformed** before plotting in any way? 
  - Yes, binning was carried out first.

Defining Layers
===
Graphics are viewed as layers, with each consisting of 4 elements:

1. Data  
2. A mapping between variables and aesthetics (e.g. color, shape, size, etc.)   
3. Geometric objects (e.g. points, lines, bars, boxes, etc.)   
4. Statistical transformation (e.g. smoothing, binning, etc.)  

Different layers can be added to the same plot.

Outline
===
type: subsection
- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
  + Data Manipulation Verbs
  + Manipulating the FHS Data
- The Grammar of Graphics with `ggplot2`
  + Elements of a Graphic
  + **Using `ggplot2`**
- Interactive Plots with `shiny`

Creating Layers with ggplot2
===
- With `ggplot2`, one has to create an object that consists of individual
  elements.
- These elements should add up to one or more layers.
- Every time a layer is added, not all elements need to be specified. If certain
  elements are left out, the default or previously specified ones are used.

Towards Goal 1.
===
- Goal 1 consists of a series of bar plots, with different colours for whether
  or not an individual had a stroke.
- What goes on the x-axis and what goes on the y-axis?
- Let us give this a try.
```{r}
library(ggplot2)
p2 <- ggplot(fhs.only1, aes(x=factor(HYPERTEN), 
  fill=factor(STROKE)))
```
-  This creates an object with the data component (*fhs.only1*) and three
   mappings(*x-axis* and *fill colour*).

Towards Goal 1
===
right:70

Now let us add the object we intend to plot.

*** 

```{r}
p2 + 
geom_bar(position="fill")
```

Achieving Goal 1
===
We still need to condition on SEX and AGE.CAT. For this, we use the
`facet_grid()` specification.
```{r fig.width=15}
p2 + geom_bar(position="fill") + 
  facet_grid(SEX ~ AGE.CAT)
```

Exercise 4
===
Try recreating this plot:
```{r echo=FALSE, fig.width=12}
p2 + geom_bar(position="dodge") + facet_grid(SEX ~ .)
```

Towards Goal 2
===
- Focus on those who had smoked for entire duration of the 12 years.
- Focus on those aged between 55 and 64 years of age.
- Visualise the relationship between the average number of cigarettes per day
  and CVD.
- First, we need to extract the data in the format we need.

Towards Goal 2 (Data Extraction)
===
- This code will extract the `RANDID` for those indivduals who were examined
  three times.
```{r}
exam.count <- table(fhs.long$RANDID)
all3.id <- as.integer(names(exam.count[exam.count == 3]))
```

Exercise 5
===

1. What is contained in the vector `all3.id`? Display the first 6 elements of
it.   
2. How many elements are there in the vector? Take a look at the `length`
function in R. 

Towards Goal 2 (Data Extraction)
===
Now let us use the `dplyr` functions to get what we need.
```{r}
fhs.smokers <- 
  filter(fhs.long, RANDID %in% all3.id) %>% 
  group_by(RANDID) %>% 
  summarise(sex=min(SEX),
    age=min(AGE),
    ave.cigpday=mean(CIGPDAY),
    num.smoking=sum(CIGPDAY > 0),
    cvd=max(CVD)) %>% 
  mutate(age.cat=cut(age, breaks=c(30,44,54,64,74,84)))
```
This gives us a data frame with one line for each subject who had been examined
thrice.

Towards Goal 2 (Data Extracted)
===
```{r}
fhs.smokers.3 <- 
  filter(fhs.smokers, 
    num.smoking == 3, 
    age.cat == "(54,64]")
```
Now we are ready to make the plot.

Towards Goal 2
===
Recall that we need 4 elements in our layer.

1. Our data will be `fhs.smokers.3`.   
2. We shall map `ave.cigpday` to the x-axis and `cvd` to the y-axis.   
3. We also need a smoothing transformation.

Achieving Goal 2
===
```{r fig.width=11}
p6 <- ggplot(fhs.smokers.3, 
  aes(x=ave.cigpday, y=cvd))
p6 + geom_point() +
  stat_smooth(method="glm", 
  family="binomial") +  
  facet_grid(sex ~ .)
```

 
===
type: section

- Introduction to Framingham Heart Study
- R and RStudio
  + Installation
  + R Basics
- Data Manipulation with `dplyr`
  + Data Manipulation Verbs
  + Manipulating the FHS Data

*** 

- The Grammar of Graphics with `ggplot2`
  + Elements of a Graphic
  + Using `ggplot2`
- **Interactive Plots with `shiny`**

About Shiny
===
- Shiny introduces a new way of presenting your data and of exploring it.
- Now, instead of a static document, you can provide your team or collaborator
  with an interactive document.
- This way, they can recreate your exploration phase instead of just seeing the
  final plot.
- This allows many more eyeballs on the data and can lead to more insights.

Create A New Shiny Document
===
- Go to *File > New File > R Markdown*
- Select *Shiny* from the list on the left, and fill in the title as *BDAH
  visualisation workshop*.
- Click *OK*.
- A new file opens in panel 2 of RStudio.
- Save this in your current directory with name of your choice, e.g. *BDAH_vik*
- Delete everything below the second *---*.
- Click on *Run Document* from within panel 2. You should see the next slide.

The New, Blank Shiny Document
===
![Not found](BDAH_demo_1.png)

Building Blocks
===
- A Shiny document consists of two parts
- Widgets
  + These are objects from which **inputs** are collected.
- RenderXXXXX objects
  + These are objects such as tables or plots, which change **every time** a
    widget is changed.

Widgets
===
- There are several different kinds of widgets available:
  + `checkboxInput`
  + `dateInput`
  + `fileInput`
  + `numericInput`
  + `radioButtons`
  + `sliderInput`
  + `textInput`
- The first argument to all these functions will be a name that we shall use to
  retrieve the input that it collects.
- Take a look at their help pages for more information for the additional
  arguments to these functions.

Render Objects
===
- These are a family of objects that **update** whenever a widget value changes.
- There are several kinds:
  + renderDataTable
  + renderImage
  + renderPlot
  + renderText
- Now let's create a simple shiny document with these objects!

Combining Widgets and Render Objects
===
The overall structure of a shiny document is:
```{r eval=FALSE}
#### Some text to describe the document.

inputPanel(
  ...
  widgets go here...
  ...
)

renderPlot( 
  ...
  use widget values to make plot(s)
  ...
)

#### More text follows.
```

Input Panel 1
===
Add the following lines to the first input panel section
```{r eval=FALSE}
radioButtons("x_var", 
  label="Explanatory Variable", 
  choices=c("BMI", "LDLC", "TOTCHOL"), 
  selected="BMI"),
  
radioButtons("y_var", 
  label="Response Variable", 
  choices=c("CVD", "STROKE", 
  "ANYCHD"), selected="CVD"),
  
checkboxInput("con_gender", 
  label="Condition on Gender", 
  value=FALSE)
```

Input Panel 2
===
Add the following lines to the second input panel section
```{r eval=FALSE}
sliderInput("bmi_range", label="BMI range", 
  min=10, max=60, value=c(10,60)),
sliderInput("ldlc_range", label="LDLC range", 
  min=20, max=565, value=c(20,565)),
sliderInput("tot_range", 
  label="Total Chol. range", min=112,
  max=625, value=c(112,625))
```

Preparing the Data
===
- First, let us get the requisite data.
- We are going to use only the data on the third visit of patients.
- Add the following lines to your shiny document.
```{r eval=FALSE}
library(ggplot2)
library(dplyr)
fhs.long <- read.csv("data/frmgham2.csv")
fhs.only3 <- filter(fhs.long, PERIOD==3)
```

